""---------------------------------------------------------------------------""
" .vimrc
"
"  Partially borrowed from:
"    * http://mixandgo.com/blog/vim-config-for-rails-ninjas
""---------------------------------------------------------------------------""
autocmd!
" set noshowmode
" set showmode
let mapleader = " "
set encoding=utf-8 nobomb

set nocompatible            " Required for vundle
filetype off                " Required for vundle

""---------------------------------------------------------------------------""
" Load Vundle stuff first
""---------------------------------------------------------------------------""
source ~/.vim/_vundle.vim

""---------------------------------------------------------------------------""
" General
""---------------------------------------------------------------------------""

" Reload the .vimrc file after changes
augroup reload_vimrc
  autocmd!
  autocmd BufWritePost $MYVIMRC so $MYVIMRC
augroup END

nnoremap <Leader>v :source $MYVIMRC<CR>

""---------------------------------------------------------------------------""
" Theme, UI
""---------------------------------------------------------------------------""
set cursorline
set ruler
set number                " Show line nums in the gutter
" set nowrap                " Don't wrap long lines
set wrap                  " Wrap long lines
set linebreak
set breakat=90
set laststatus=2          " show a status line even if there's only 1 window
set colorcolumn=80,120    " Show rulers
set t_Co=256              " 256 colors
set term=xterm-256color
set termencoding=utf-8
set magic                 " More familiar regexing

" Time out on key codes but not mappings
set notimeout
set ttimeout
set ttimeoutlen=100

" Disable Ex mode
nnoremap Q <nop>

"----
" Improve scrolling speed
"----
set ttyfast
" set ttyscroll=3
set lazyredraw
set scrolloff=7

"----
" Folding
"----
set foldmethod=syntax
set foldlevel=1
set foldnestmax=10
set nofoldenable

"----
" Listchars/whitespace
"----
set list          " Show invisibles/whitespace
" set listchars=tab:▸\ ,trail:·,eol:¬,nbsp:_,extends:❯,precedes:❮
set listchars=tab:▸\ ,trail:·,nbsp:_,extends:❯,precedes:❮

" Syntax coloring lines that are too long just slows down the world
set synmaxcol=1200

" Use only 1 space after "." when joining lines instead of 2
" set nojoinspaces

" Don't reset cursor to start of line when moving around
set nostartofline

if has("gui_running")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
    set guifont=Inconsolata:h14
  endif
  set bs=2
endif

" colorscheme Tomorrow-Night
" colorscheme Tomorrow
" colorscheme Tomorrow-Night-Eighties
colorscheme Seti

" netrw
let g:netrw_liststyle=3        " Default to tree view

""---------------------------------------------------------------------------""
" Allow project-specific .vimrc
""---------------------------------------------------------------------------""
set exrc
set secure

""---------------------------------------------------------------------------""
" Backup, tmp settings
""---------------------------------------------------------------------------""
set backupdir^=~/.vim/backup//
set directory^=~/.vim/tmp//
set noswapfile

""---------------------------------------------------------------------------""
" tmux
""---------------------------------------------------------------------------""
autocmd BufReadPost,FileReadPost,BufNewFile * call system("tmux rename-window %")

""---------------------------------------------------------------------------""
" Buffers
""---------------------------------------------------------------------------""
" Auto-reload buffers when files are changed on disk
set autoread

" Close a buffer but don't close the window
map <leader>bc :bprevious<CR>:bdelete #<CR>

function! CloseAllOtherBuffers()
  let l:current_buffer_number = bufnr('%')
  let l:lower_buffer_min_number = 1
  let l:lower_buffer_max_number = l:current_buffer_number - 1
  let l:upper_buffer_min_number = l:current_buffer_number + 1
  let l:upper_buffer_max_number = 10000
  let l:lower_range = join([l:lower_buffer_min_number, l:lower_buffer_max_number], ',')
  let l:upper_range = join([l:upper_buffer_min_number, l:upper_buffer_max_number], ',')
  let l:cmd =  l:lower_range . 'bd | ' . l:upper_range . 'bd'

  exec(l:cmd)
endfunction

map <Leader>q :call CloseAllOtherBuffers()<CR>

""---------------------------------------------------------------------------""
" Windows
""---------------------------------------------------------------------------""
" Save some ring-finger key strokes
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

""---------------------------------------------------------------------------""
" Spelling
""---------------------------------------------------------------------------""
set spell
set spelllang=en_us

""---------------------------------------------------------------------------""
" Filetypes, syntax
""---------------------------------------------------------------------------""
" Detect file type and syntax
filetype plugin indent on
syntax on
syntax enable
syntax sync fromstart
set autoindent

if has("autocmd")
  autocmd Filetype coffee setlocal ts=4 sts=2 sw=2 expandtab
  autocmd Filetype eruby setlocal ts=2 sts=2 sw=2 expandtab
  autocmd Filetype html setlocal tabstop=2 shiftwidth=2 expandtab
  autocmd Filetype javascript setlocal tabstop=4 softtabstop=0 shiftwidth=4 noexpandtab
  autocmd Filetype qf setlocal nospell
  autocmd Filetype ruby setlocal ts=2 sts=2 sw=2 expandtab
  autocmd Filetype body_massage setlocal ts=2 sts=2 sw=2 expandtab
  autocmd Filetype vim setlocal ts=2 sts=2 sw=2 expandtab
endif

" Completion
let g:neocomplete#enable_at_startup = 1
set omnifunc=syntaxcomplete#Complete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

