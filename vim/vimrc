""===========================================================================""
" .vimrc
"
"  Partially borrowed from:
"    * http://mixandgo.com/blog/vim-config-for-rails-ninjas
"    * http://amix.dk/vim/vimrc.html
"
" Search settings, stolen from carlhuda/janus.
"
" https://github.com/carlhuda/janus/blob/master/janus/vim/core/before/plugin/settings.vim
"
""===========================================================================""

let mapleader = " "

""===========================================================================""
" 0. Load vim-plug stuff first
""===========================================================================""
source ~/.vim/plugins.vim

""===========================================================================""
" 1. important
""===========================================================================""
set pastetoggle=<F9> " For Mac

""===========================================================================""
" 2. moving around, search and patterns
""===========================================================================""
set noignorecase  " searches are case insensitive...
set smartcase     " ... unless they contain at least one capital letter

""===========================================================================""
" 3. tags
""===========================================================================""

""===========================================================================""
" 4. displaying text
""===========================================================================""
set scrolloff=3
set wrap                  " Wrap long lines
" set whichwrap+=<,>,h,l
set linebreak
set breakat=90
set number
set list          " Show invisibles/whitespace
" set listchars=tab:▸\ ,trail:·,eol:¬,nbsp:_,extends:❯,precedes:❮
set listchars=tab:▸\ ,trail:·,nbsp:_,extends:❯,precedes:❮

""===========================================================================""
" 5. syntax, highlighting and spelling
""===========================================================================""
" Detect file type and syntax
syntax on
syntax sync fromstart

" Turn off syntax over 500 chars in a line
set synmaxcol=500

set spell
set spelllang=en_us

set colorcolumn=80,120    " Show rulers
set hlsearch              " highlight matches
set cursorline

" colorscheme Tomorrow-Night
" colorscheme Tomorrow
" colorscheme Tomorrow-Night-Eighties
colorscheme seti
" colorscheme apprentice
" let g:onedark_terminal_italics = 1
" colorscheme onedark
" let g:seoul256_background = 234
" colorscheme seoul256
" set background=dark

""===========================================================================""
" 6. multiple windows
""===========================================================================""
" Open new split window below.
set splitbelow

" Open new vsplit window to the right.
set splitright

""===========================================================================""
" 7. multiple tab pages
""===========================================================================""

""===========================================================================""
" 8. terminal
""===========================================================================""
if !has('nvim')
  set term=xterm-256color
endif

set ttyfast
" set ttyscroll=3

""===========================================================================""
" 9. using the mouse
""===========================================================================""

""===========================================================================""
" 10. printing
""===========================================================================""

""===========================================================================""
" 11. messages and info
""===========================================================================""
" Don't need this since it's shown in lightline.
set noshowmode

""===========================================================================""
" 12. selecting text
""===========================================================================""

""===========================================================================""
" 13. editing text
""===========================================================================""

""===========================================================================""
" 14. tabs and indenting
""===========================================================================""
filetype plugin indent on
set smartindent

" Set default spacing
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

setlocal omnifunc=syntaxcomplete#Complete

""===========================================================================""
" 15. folding
""===========================================================================""
set foldlevelstart=10
set foldnestmax=10      " 10 nested fold max


""===========================================================================""
" 16. diff mode
""===========================================================================""

""===========================================================================""
" 17. mapping
""===========================================================================""
"--------------------------------------
" Leader commands
"--------------------------------------
"----
" <Leader>[non-alpha]
"----
" if exists(":Ag")
  " bind . to grep shortcut
  " command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap <leader>. :Ag!<SPACE>
" endif

" greplace.vim
nnoremap <leader>/ :Gsearch<SPACE>
nnoremap <leader>\ :Greplace<CR>

"--------------------------------------
" <Leader>A-G
"--------------------------------------
" thoughtbot/vim-rspec
nnoremap <leader>a :call RunAllSpecs()<CR>

" Close a buffer but don't close the window
nnoremap <silent><leader>bc :bprevious<CR>:bdelete #<CR>

" Basic options are set in ~/.ctags
nnoremap <leader>ct :call turboladen#UpdateCTags()<CR>

" Since I remap <C-l> (default redraw command), add a mapping for that.
nnoremap <leader>dr :redraw!<CR>

" Dash.app docs
if exists(":Dash")
  nnoremap <leader>da :Dash<SPACE>
endif

" eDIT MY vIMRC FILE
nnoremap <leader>ev :vsplit $MYVIMRC<CR>

" fugitive. Follows mappings for the zsh git plugin.
noremap <leader>ga :Gwrite<CR>
noremap <leader>gbl :Gblame<CR>
noremap <leader>gbr :Gbrowse<CR>
noremap <leader>gc :Gcommit<CR>
noremap <leader>gd :Gvdiff<CR>
noremap <leader>ggp :Gpush<CR>
noremap <leader>ggr :Ggrep<SPACE>
noremap <leader>gi :Git<SPACE>
noremap <leader>glg :Glog<CR>
noremap <leader>gll :Gpull<CR>
noremap <leader>gm :Gmove<SPACE>
noremap <leader>gr :Gremove<CR>
noremap <leader>gs :Gstatus<CR>

" gitv
noremap <leader>gva :Gitv --all<CR>
noremap <leader>gvv :Gitv<CR>
noremap <leader>gvg :Gitv -G<space>
noremap <leader>gvs :Gitv -S<space>

"--------------------------------------
" <Leader>H-L
"--------------------------------------
noremap <leader>h :call turboladen#SetUpTurboladenDocs()<CR>

" bind K to grep word under cursor
" if exists(":Ag")
  nnoremap <leader>k :Ag! "\b<C-R><C-W>\b"<CR>
" else
"   nnoremap <leader>K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" endif

" thoughtbot/vim-rspec
nnoremap <leader>l :call RunLastSpec()<CR>

"--------------------------------------
" <Leader>L-R
"--------------------------------------
" Output the command for manually running RSpec for that line.
nnoremap <leader>m :call turboladen#RSpecCommandForManualRunning()<CR>

" Do a TODO search
if exists(":Ggrep")
  nnoremap <leader>o :Ggrep! -i todo<CR>
elseif exists(":Ag")
  nnoremap <leader>o :Ag! todo<CR>
else
  nnoremap <leader>o :grep! todo<CR>
endif

nnoremap <leader>q :BufOnly<CR>

"--------------------------------------
" <Leader>S-V
"--------------------------------------
" thoughtbot/vim-rspec
nnoremap <leader>s :call RunNearestSpec()<CR>
nnoremap <leader>t :call RunCurrentSpecFile()<CR>

" Reload all the things!
nnoremap <leader>v :source $MYVIMRC<CR>

"--------------------------------------
" <Leader>W-Z
"--------------------------------------
nnoremap <leader>w :call turboladen#StripTrailingWhitespaces()<CR>

" Syntastic toggle
nnoremap <leader>y :SyntasticToggleMode<CR>

"-------------------------------------------------------------------------------
" Other remappings
"-------------------------------------------------------------------------------

"--------------------------------------
" F-keys
"--------------------------------------
nnoremap <F7> :IndentLinesToggle<CR>

" tagbar
nnoremap <F8> :TagbarToggle<CR>

" F9 is for pastemode

" nerdtree
if exists(":NERDTreeFind")
  " Mapping twice since F2/F3 are easier on the HHKB and F9/F10 are easier
  " with the Mac keyboard.
  nnoremap <silent> <F2> :NERDTreeToggle<CR>
  nnoremap <silent> <F3> :NERDTreeFind<CR>
  nnoremap <silent> <F11> :NERDTreeToggle<CR>
  nnoremap <silent> <F12> :NERDTreeFind<CR>
  " let g:NERDTreeMapActivateNode="<F3>"
  " let g:NERDTreeMapPreview="<F4>"
endif
"------------------------------------------------------------------------------
" Ctrl- combos
"------------------------------------------------------------------------------
" Save some ring-finger key strokes
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Center screen on Down/Up jumping
noremap <C-d> <C-d>zz
noremap <C-u> <C-u>zz

" Omni-complete based on ctags
inoremap <C-]> <C-x><C-]>

"------------------------------------------------------------------------------
" Alpha character combos
"------------------------------------------------------------------------------
" Reindent whole file
nnoremap <leader>= :call turboladen#KeepJumps("gg=G")<CR>
" Indent after gp
" http://vim.wikia.com/wiki/Selecting_your_pasted_text
nnoremap <expr> p 'p`[' . strpart(getregtype(), 0, 1) . '`]=`['

" Indent after gp
nnoremap <expr> gp 'p`[' . strpart(getregtype(), 0, 1) . '`]=`]'

inoremap jk <ESC>

" Disable Ex mode
nnoremap Q <NOP>

" After block yank and paste, move cursor to the end of operated text
" Also, don't copy over-pasted text in visual mode
vnoremap y y`]
vnoremap p "_dP`]
nnoremap p p`]

" No more accidentally showing up command window (Use C-f to show it)
nnoremap q: :q

" Split a line and remove whitespace from old line.
" https://www.reddit.com/r/vim/comments/3g8y3r/finally_hacked_together_a_quick_split_line/ctw4b0i
nnoremap S i<CR><ESC>^mwgk:silent! s/\v +$//<CR>:noh<CR>


""===========================================================================""
" 18. reading and writing files
""===========================================================================""
set nobackup
set nowritebackup

""===========================================================================""
" 19. the swap file
""===========================================================================""
set noswapfile

""===========================================================================""
" 20. command line editing
""===========================================================================""
" Only remember this many commands
set history=300

" shell-like tab completion for command line
set wildmode=longest,list,full
set wildmenu

" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Ignore librarian-chef, vagrant, test-kitchen and Berkshelf cache
set wildignore+=*/tmp/librarian/*,*/.vagrant/*,*/.kitchen/*,*/vendor/cookbooks/*

" Ignore rails temporary asset caches
set wildignore+=*/tmp/cache/assets/*/sprockets/*,*/tmp/cache/assets/*/sass/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*

" Ignore simplecov generated coverage docs
set wildignore+=coverage/*

" Ignore RubyMine stuff
set wildignore+=.idea/*

""===========================================================================""
" 21. executing external commands
""===========================================================================""

""===========================================================================""
" 22. running make and jumping to errors
""===========================================================================""
" Programs that use :grep will use these; these don't affect the output of
" :Ag.
if executable('sift')
  set grepprg=sift\ --line-number\ --binary-skip\ --no-color\ --exclude-dirs\ '.git'
  set grepformat=%f:%l:%m
elseif executable('ag')
  set grepprg=ag\ --vimgrep\ --column
  set grepformat=%f:%l:%c:%m
endif

""===========================================================================""
" 23. language specific
""===========================================================================""

""===========================================================================""
" 24. multi-byte characters
""===========================================================================""
set termencoding=utf-8

""===========================================================================""
" 25. various
""===========================================================================""
" Use different cursor for insert mode.
" https://gist.github.com/andyfowler/1195581
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

""===========================================================================""
" XX. No :options section
""===========================================================================""
set lazyredraw

runtime macros/matchit.vim

" Reload the .vimrc file after changes
augroup reload_vimrc
  autocmd!
  autocmd BufWritePost $MYVIMRC so $MYVIMRC
augroup END

augroup vimrc
  autocmd!

  if has('nvim')
    " autocmd! BufWritePost,BufEnter * Neomake
    autocmd! BufWritePost * Neomake
  endif

  " Filetypes
  autocmd BufNewFile,BufRead *.json.jbuilder set ft=ruby

  autocmd Filetype html setlocal softtabstop=4
  autocmd Filetype qf setlocal nospell
  autocmd Filetype vimwiki setlocal ts=4 sts=4 sw=4 expandtab
  autocmd Filetype vim setlocal ts=2 sts=2 sw=2 expandtab
  autocmd Filetype zsh setlocal ts=2 sts=2 sw=2 expandtab
  " autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  " autocmd FileType ruby,eruby setlocal omnifunc=rubycomplete#Complete

  " Resize when tmux gets resized
  autocmd VimResized * :wincmd =

  " Delete the buffer once I'm done with it.
  autocmd BufReadPost fugitive://* set bufhidden=delete
  autocmd BufReadPost nerdtree://* set bufhidden=delete

  " Open grep commands, specifically Ggrep, in QuickFix
  autocmd QuickFixCmdPost *grep* cwindow

  "-------------------
  " baverman/vial-http
  "-------------------
  au BufNewFile __vial_http__ nnoremap <buffer> <silent> <C-k> :b __vial_http_req__<CR>
  au BufNewFile __vial_http_req__ nnoremap <buffer> <silent> <C-k> :b __vial_http_hdr__<CR>
  au BufNewFile __vial_http_hdr__ nnoremap <buffer> <silent> <C-k> :b __vial_http__<CR>
  au BufNewFile __vial_http__ setlocal nospell

  "-------------------
  " vim-plug
  "-------------------
  au FileType vim-plug setlocal nospell
augroup END

""===========================================================================""
" YY. Plugin options that must be here.
""===========================================================================""
"-------------------------
" ag.vim
" https://robots.thoughtbot.com/faster-grepping-in-vim
"-------------------------
" if executable('sift')
"   let g:ag_prg="sift --no-color --line-number --binary-skip"
"   let g:ag_format="%f:%l:%m"
" elseif executable('ag')
if executable('ag')
  " let g:ag_prg="ag --context --vimgrep --only-matching --silent"
  let g:ag_prg="ag --vimgrep --only-matching --silent"
endif

let g:ag_highlight=1            " highlight term after search
let g:ag_working_path_mode="r"  " Search from project root

"-------------------------
" casetrate
"-------------------------
let g:casetrate_leader = '\c'

"-------------------------
" fzf
" https://github.com/junegunn/dotfiles/blob/da378217ad008d422bc5b577802cad237a2930e1/vimrc#L1197
"-------------------------
set rtp+=/usr/local/opt/fzf
nnoremap <silent> <leader><leader> :FZF -m<CR>

nnoremap <silent> <leader>fs :call fzf#run({ 'tmux_height': winheight('.') / 4, 'sink': 'botright split' })<CR>
nnoremap <silent> <leader>fv :call fzf#run({ 'tmux_width': winwidth('.') / 4, 'sink': 'vertical botright split' })<CR>

function! BufList()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! BufOpen(e)
  execute 'buffer '. matchstr(a:e, '^[ 0-9]*')
endfunction

" fuzzy find buffer
nnoremap <silent> <leader><ENTER> :call fzf#run({
\   'source':      reverse(BufList()),
\   'sink':        function('BufOpen'),
\   'options':     '+m',
\   'tmux_height': '40%'
\ })<CR>

" Change colors on the fly
nnoremap <silent> <leader>C :call fzf#run({
\   'source':
\     map(split(globpath(&rtp, "colors/*.vim"), "\n"),
\         "substitute(fnamemodify(v:val, ':t'), '\\..\\{-}$', '', '')"),
\   'sink':       'colo',
\   'options':    '+m',
\   'tmux_width': 20,
\   'launcher':   'xterm -geometry 20x30 -e bash -ic %s'
\ })<CR>

" function! s:tmux_words(query)
"   let g:_tmux_q = a:query
"   let matches = fzf#run({
"   \ 'source':      'tmuxwords.rb --all-but-current --scroll 500 --min 5',
"   \ 'sink':        function('Tmux_feedkeys'),
"   \ 'options':     '--no-multi --query='.a:query,
"   \ 'tmux_height': '40%'
"   \ })
" endfunction

" function! Tmux_feedkeys(data)
"   echom empty(g:_tmux_q)
"   execute "normal! ".(empty(g:_tmux_q) ? 'a' : 'ciW')."\<C-R>=a:data\<CR>"
"   startinsert!
" endfunction

" inoremap <silent> <C-X><C-T> <C-o>:call <SID>tmux_words(expand('<cWORD>'))<CR>
" airblade/vim-gitgutter
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '✹'
let g:gitgutter_sign_removed = '✖'
" let g:gitgutter_sign_removed_first_line = '^^'
" let g:gitgutter_sign_modified_removed = '⟪⟫'
let g:gitgutter_sign_modified_removed = '⇄'

"-------------------------
" skwp/greplace.vim
"-------------------------
if executable('sift')
  let g:grep_cmd_opts = '--line-number --no-color --no-conf --binary-skip'
endif

"-------------------------
" indentLine
"-------------------------
let g:indentLine_color_term = 239
let g:indentLine_char = '︙'
let g:indentLine_enabled = 0

"-------------------------
" lightline
"-------------------------
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'filename'] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'turboladen#LightLineFugitive',
      \   'readonly': 'turboladen#LightLineReadonly',
      \   'modified': 'turboladen#LightLineModified',
      \   'filename': 'turboladen#LightLineFilename',
      \   'fileformat': 'turboladen#LightLineFileformat',
      \   'filetype': 'turboladen#LightLineFiletype',
      \   'fileencoding': 'turboladen#LightLineFileencoding',
      \   'mode': 'turboladen#LightLineMode'
      \ }
      \ }

      " \ 'separator': { 'left': '', 'right': '' },
      " \ 'subseparator': { 'left': '', 'right': '' }

"-------------------------
" nerdtree-git-plugin
"-------------------------
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

"-------------------------
" gabrieleana/vim-markdown
"-------------------------
let g:markdown_mapping_switch_status = '<leader>ms'

"-------------------------
" neomake
"-------------------------
if has("nvim")
  let g:neomake_ruby_rubocop_maker = {
        \ 'exe': 'bundle',
        \ 'args': ['exec', 'rubocop', '--force-exclusion', '--display-cop-names', '--no-color'],
        \ 'errorformat': '%f:%l:%c: %t: %m',
        \ 'postprocess': function('neomake#makers#ft#ruby#RubocopEntryProcess')
        \ }


  let yard_errorformat =
        \ '%W[warn]:\ %m\ in\ file\ `%f`\ near\ line\ %l,%Z,'.
        \ '%E[error]:\ %m\ in\ file\ `%f`\ near\ line\ %l,%Z,'.
        \ '%-G%.%.#'
  let g:neomake_ruby_yard_maker = {
        \ 'exe': 'yard',
        \ 'args': ['stats'],
        \ 'errorformat': yard_errorformat
        \ }

  let g:neomake_coffee_checkers = ['coffeelint']
  let g:neomake_css_checkers = ['csslint']              " npm install -g csslint
  let g:neomake_elixir_checkers = ['elixir']
  let g:neomake_haml_checkers = ['hamllint']
  let g:neomake_html_checkers = ['tidy']
  let g:neomake_javascript_checkers = ['jshint']
  let g:neomake_json_checkers = ['jsonlint']            " npm install -g jsonlint
  let g:neomake_markdown_checkers = ['mdl']             " gem install mdl
  let g:neomake_ruby_enabled_makers = ['mri', 'rubocop', 'yard']
  let g:neomake_sh_checkers = ['shellcheck']            " brew install shellcheck
  let g:neomake_scss_checkers = ['scsslint']            " brew install shellcheck

  " let g:neomake_open_list = 2
endif

"-------------------------
" syntastic
"-------------------------
if !has("nvim")
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0

  let g:syntastic_error_symbol='✗'
  let g:syntastic_warning_symbol='⚠'
  let g:syntastic_style_error_symbol = '✗'
  let g:syntastic_style_warning_symbol = '⚠'
  let g:syntastic_aggregate_errors = 1

  let g:syntastic_coffee_checkers = ['coffee', 'coffeelint']
  let g:syntastic_css_checkers = ['csslint']              " npm install -g csslint
  let g:syntastic_elixir_checkers = ['elixir']
  let g:syntastic_eruby_checkers = ['ruby']
  let g:syntastic_haml_checkers = ['haml', 'haml_lint']   " gem install haml-lint
  let g:syntastic_handlebars_checkers = ['handlebars']
  let g:syntastic_javascript_checkers = ['jshint']      " npm install -g jshint
  let g:syntastic_markdown_checkers = ['mdl']             " gem install mdl
  let g:syntastic_ruby_checkers = ['mri', 'rubocop', 'yard']
  let g:syntastic_sass_checkers = ['sass']
  let g:syntastic_sh_checkers = ['sh']
  let g:syntastic_slim_checkers = ['slimrb']
  " let g:syntastic_text_checkers = ['language_check']      " pip install --user --upgrade language-check
  let g:syntastic_yaml_checkers = ['jsyaml']              " npm install -g js-yaml
  let g:syntastic_zsh_checkers = ['zsh']

  let g:syntastic_enable_elixir_checker = 1
  let g:syntastic_ruby_rubocop_args = "--force-exclusion --display-cop-names --no-color"
  let g:syntastic_markdown_mdl_args = "--style ~/.mdl_style.rb"
  " let g:syntastic_text_language_check_args = '--language=en-US'
  " let g:syntastic_debug = 3
endif

"-------------------------
" tmuxline.vim
"-------------------------
let g:tmuxline_preset = 'full'
" let g:tmuxline_powerline_separators = 0

"-------------------------
" thoughtbot/vim-rspec
"-------------------------
let g:rspec_runner = "os_x_iterm"
let g:rspec_command = turboladen#RSpecVimCommand()

"-------------------------
" vim-ruby-doc
"-------------------------
let g:ruby_doc_command='open'
let g:ruby_doc_ruby_mapping='<leader>RB'
let g:ruby_doc_rails_mapping='<leader>RR'
let g:ruby_doc_rspec_mapping='<leader>RS'

"-------------------------
" vimwiki
"-------------------------
let g:vimwiki_list = [{'path': '$HOME/Development/projects/vimwiki'}]

"-------------------------
" Valloric/YouCompleteMe
"-------------------------
" let g:ycm_collect_identifiers_from_tags_files = 1
" let g:ycm_seed_identifiers_with_syntax = 1
" let g:ycm_complete_in_comments = 1
" let g:ycm_disable_for_file_larger_than_kb = 1000  " Default is 1000
let g:ycm_min_num_of_chars_for_completion = 3
let g:ycm_min_num_identifier_candidate_chars = 3
