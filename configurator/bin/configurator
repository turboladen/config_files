#!/usr/bin/env ruby

require 'thor'
require 'find'
require 'fileutils'

# This thing is just a tool for setting up my environment. Make sure to
# install dependencies first.
class Configurator < Thor
  include Thor::Actions

  def self.source_root
    File.dirname(__FILE__)
  end

  desc 'hoe', 'Copies the hoe_templates stuff to ~/.hoe_template'
  method_options force: false
  def hoe
    default_dir = '/.hoe_template'
    destination_root = Dir.home + default_dir

    return unless yes?('Copy to ~/.hoe_template?')

    remove_dir destination_root if options[:force]
    directory('hoe_template', Dir.home + default_dir)
  end

  desc 'git', "Sets up Steve's git config"
  def git
    puts 'Setting up your git stuff now...'

    `git config --global user.name "Steve Loveless"`
    `git config --global user.email "steve.loveless@gmail.com"`
    `git config --global core.editor vim`
    `git config --global alias.ci 'commit'`
    `git config --global alias.st 'status'`
    `git config --global color.ui true`

    `git config --global merge.tool vimdiff`
    `git config --global diff.tool vimdiff`
    `git config --global difftool.prompt false`

    puts 'Done.  Have you configured your SSH keys?'
  end

  desc 'vim', "Sets up Steve's vim files"
  def vim
    puts 'Setting up your Vim stuff now...'
    unless Dir.exist?(File.join(Dir.home, '.vim', 'bundle', 'Vundle.vim'))
      abort 'Install Vundle first!'
    end

    source_vim_dir = File.join(Dir.pwd, 'editors')
    dest_vim_dir = File.join(Dir.home, '.vim')

    dest_vimrc = File.join(Dir.home, '.vimrc')
    unless File.exist?(dest_vimrc)
      source_vimrc = File.join(source_vim_dir, 'vimrc')
      puts_n_run("ln -s #{source_vimrc} #{dest_vimrc}") 
    end

    dest_vundle_file = File.join(dest_vim_dir, '_vundle')
    unless File.exist?(dest_vundle_file)
      source_vundle_file = File.join(source_vim_dir, '_vundle')
      puts_n_run("ln -s #{source_vundle_file} #{dest_vundle_file}")
    end

    Dir.chdir(File.join('..', 'editors', 'vim'))

    Find.find('.') do |file|
      relative_object = File.absolute_path(file).sub(Dir.pwd, '')
      full_dest_object = File.join(dest_vim_dir, relative_object)

      if File.exist?(full_dest_object)
        puts "Destination file/directory already exists: #{full_dest_object}"
      else
        if File.directory?(file)
          puts "Creating directory: #{full_dest_object}"
          Dir.mkdir(full_dest_object)
        else
          puts "Copying file '#{file}' to '#{full_dest_object}'"
          FileUtils.cp(file, full_dest_object)
        end
      end
    end
  end

  desc 'tmux', "Sets up Steve's tmux files"
  def tmux
    puts "Setting up your tmux stuff now..."

    source_tmux_dir = File.join(Dir.pwd, 'tmux')
    source_tmux_file = File.join(source_tmux_dir, 'tmux.conf')
    dest_tmux_file = File.join(Dir.home, '.tmux.conf')

    if File.exist?(dest_tmux_file)
      puts "'#{dest_tmux_file}' already exists. Skipping."
    else
      puts_n_run("ln #{source_tmux_file} #{dest_tmux_file}")
    end

    source_tmux_dev_file = File.join(source_tmux_dir, 'tmux_dev_env.sh')
    source_tmux_rails_file = File.join(source_tmux_dir, 'tmux_rails_env.sh')

    puts_n_run("sudo ln -s #{source_tmux_dev_file} /usr/local/bin/tmux_dev_env")
    puts_n_run("sudo ln -s #{source_tmux_rails_file} /usr/local/bin/tmux_rails_env")
  end

  private

  def puts_n_run(cmd)
    puts "Running command: #{cmd}"
    `#{cmd}`
  end
end

Configurator.start
